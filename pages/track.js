import Head from "next/head";
import { Header } from "../components/Header";
import { Footer } from "../components/Footer";
import { useWorkItemContext } from "../contexts/workItemProvider";
import { EditWorkItem } from "../components/EditWorkItem";
import { AddWorkItem } from "../components/AddWorkItem";
import { useOverlayContext } from "../contexts/overlayProvider";
import { SearchableTable } from "../components/SearchableTable";

import { GrAdd } from "react-icons/gr";
import styled from "styled-components";
import { AddToTracker } from "../components/AddToTracker";

export default function Track() {
  //import workitemprovider and distrubte to table components
  const [workItemList, insertWorkItem, setWorkItemList, updateWorkItem] =
    useWorkItemContext();

  const [
    isOverlayOpen,
    openOverlay,
    closeOverlay,
    isTableEditMode,
    handleEditButtonClick,
    initialAddValue,
    isEditMode,
    setIsEditMode,
    handleEditButtonSingleItemClick,
    isAddToTrackerOverlayOpen,
    openAddToTrackerOverlay,
    closeAddToTrackerOverlay,
  ] = useOverlayContext();

  //filter all checked items and copy the individual objects via map so that no reference prob occurs
  const countSelected = workItemList
    .filter((item) => item.isChecked === true)
    .map((item) => {
      return { ...item };
    });

  return (
    <>
      <Head>
        <title>Track</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header header="Track work"></Header>
      <div style={{ display: "flex" }}>
        <AddButton
          onClick={openOverlay}
          disabled={isOverlayOpen || isAddToTrackerOverlayOpen}
        >
          <GrAdd />
        </AddButton>
        <EditWorkItem
          handleClick={handleEditButtonClick}
          isOverlayOpen={isOverlayOpen}
          isAddToTrackerOverlayOpen={isAddToTrackerOverlayOpen}
        />
      </div>
      {isOverlayOpen ? (
        <div style={{ position: "relative", backgroundColor: "black" }}>
          <AddWorkItem
            initialAddValue={isEditMode ? initialAddValue : null}
            handleCloseClick={closeOverlay}
            isEditMode={isEditMode}
          />
        </div>
      ) : null}

      {isAddToTrackerOverlayOpen ? (
        <div style={{ position: "relative", backgroundColor: "black" }}>
          <AddToTracker
            countSelected={countSelected}
            handleClose={closeAddToTrackerOverlay}
          />
        </div>
      ) : null}

      <SearchableTable
        data={workItemList}
        setData={setWorkItemList}
        hasCheckbox={true}
        width={"100%"}
        isTableEditMode={isTableEditMode}
        handleEditItemClick={handleEditButtonSingleItemClick}
        isOverlayOpen={isOverlayOpen}
      ></SearchableTable>
      {countSelected.length ? (
        <button
          onClick={() => {
            openAddToTrackerOverlay();
          }}
          disabled={isOverlayOpen}
        >
          Add to tracker
        </button>
      ) : null}
      <Footer></Footer>
    </>
  );
}

const AddButton = styled.button`
  background: none;
  border: none;
  cursor: pointer;
  outline: inherit;
  border-radius: 20px;
`;
